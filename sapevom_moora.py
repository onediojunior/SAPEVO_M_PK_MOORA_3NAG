# -*- coding: utf-8 -*-
"""SAPEVOM_MOORA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14b86Fem_7eosSh_ruQfN5EM9xXSx_dnA
"""

#@title

# DECIDERTECH
from IPython.display import display, HTML

# imprime imagem

# O caminho para a imagem
imagem = 'https://i.postimg.cc/Qx7nS9q2/decidertech-top.png'
# O código HTML para exibir a imagem em tamanho original e centralizada
html = f'<img src="{imagem}" style="display: block; margin: 0 auto; width: 100%; height: 100%; object-fit: contain">'
# Exibe a imagem usando o display do IPython e o HTML
display(HTML(html))

# apresenta Sobre DECIDERTECH
html_sobre = '''
  <div style="width:100%; color: black; background-color:none; margin-top:20px">
    <div style="float: left; width: 45%; margin-top:10px">
      <h1 style="color:#28348A; margin-bottom:10px">Sobre o DECIDERTECH ?</h1>
      <p style="font-size:16px; line-height: 23px; text-align:justify">
        DECIDERTECH é uma aplicação criada para ajudar pessoas e organizações na tomada de decisão, 
        seja para mono ou multidecisores. A ferramenta foi desenvolvida para atender a uma proposta de dissertação do Mestrado de Governança, Tecnologia e Inovação 
        da Universidade Católica de Brasília.
      </p3>
      <p style="font-size:16px; line-height: 23px; text-align:justify">
        A aplicação é baseada em um método híbrido e extensível que combina o método <b>Simple Aggregation of Preferences Expressed 
        by Ordinal. Vectors–Multi Decision Makers</b> (SAPEVO-M) e o método <b>Multi-Objective Optimization on the bais of Ratio Analysis</b> (MOORA).
        Como estado-da-arte, a aplicação oferece oportunidade aos decisores com pouca maturidade realizarem suas decisões com informações 
        de decisores anteriores.
      </p>
      <p style="font-size:16px; line-height: 23px; text-align:justify">
        Para sua concretização, a ferramenta foi desenvolvida com o uso da linguagem Python, além do uso de HTML e 
        Javascript para melhorar a interface com o usuário, possibilitando uma melhor experiência ao usar a aplicação e tomadas 
        de decisões mais assertivas.
      </p>
    </div>
    <div style="float: left; width: 55%; display: flex; justify-content: center; align-items: center;">
      <center>
        <img style="margin-top:80px" src="https://i.postimg.cc/ZKNR05dn/logo-ucb.png" />
        <!-- <iframe style="padding-top:80px" width="520" height="300" src="https://www.youtube.com/embed/IMmnwXecsMw" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe> -->
      </center>
    </div>
  </div>
  <div style=”clear: both”>
'''
display(HTML(html_sobre))

"""# **&#9776; MÓDULO PRINCIPAL DECIDERTECH**"""

!pip install jupyter-datatables

"""<img src="https://i.postimg.cc/C1fphJv2/load-packet.png" />
<hr/>
<h4>Carrega todas as bibliotecas necessárias para o funcionamento da aplicação. Caso haja algum problema, o sistema irá informar o usuário com a mensagem <span style="color:red">"Problemas ao carregar bibliotecas"</span>.</h4>
<h4>Portanto, caso essa mensagem apareça instale as bibliotecas necessárias com o comando <b>! pip install nome_biblioteca</b></h4>
"""

#@title
#load packages
import matplotlib.pyplot as plt
from IPython.display import HTML
from IPython.display import display
import pandas as pd
import numpy as np
import os
import sys
from datetime import datetime
try:
  import shutil
  from jupyter_datatables import init_datatables_mode
  import time
  from google.colab import files
  import warnings
  from ipywidgets import widgets, Layout, HBox, VBox, Box
  warnings.filterwarnings("ignore")
  display(HTML('<b>Mensagem: </b><span style="color:blue">Bibliotecas carregadas com sucesso!</span>'))
except:
  display(HTML('<b>Mensagem: </b><span style="color:red">Problemas ao carregar bibliotecas.</span>'))
  init_datatables_mode()

"""<img src="https://i.postimg.cc/xT4Rwyf6/codifica-sapevom-moora.png" />
<hr/>
<h4>Codifica a classe principal denominada SAPEVOM_MOORA que será herdada pelas classes ADMINISTRADOR e DECISORES</span>.</h4>
"""

#@title
class SAPEVOM_MOORA:
  
  SYSTEM_DIR = "/content/drive/MyDrive/SAPEVOM_MOORA_3NPK"
  NAME_SYSTEM = "DECIDERTECH (Método SAPEVO-M-PK MOORA 3NAG)"

  def __init__(self):
    # define diretório do sistema
    self.decider = None
    self.filename_project = None
    self.number_decision_makers = None
    self.filename_MD = None

  def change_SystemDir(self):
    os.chdir(self.SYSTEM_DIR)

  def set_DeciderName(self, new_value):
    self.decider = new_value

  def get_DeciderName(self):
    return self.decider
  
  def set_FilenameProject(self, new_value):
    self.filename_project = new_value
  
  def get_FilenameProject(self):
    return self.filename_project
  
  def set_NumberDecisionMakers(self, new_value):
    self.number_decision_makers = new_value

  def get_NumberDecisionMakers(self):
    return self.number_decision_makers

  def set_FilenameMD(self, new_value):
    self.filename_MD = new_value
  
  def get_FilenameMD(self):
    return self.filename_MD
  
  def get_GoogleColabTheme(self):
    return os.getenv('COLAB_THEME')
    
  def get_CurrentDateTime(self, type):
    now = datetime.now()
    if type == 1:
            return now.strftime("%d_%m_%Y_%H_%M_%S")
    elif type == 2:
        return now.strftime("%d/%m/%Y")
    elif type == 3:
        return now.strftime("%H:%M:%S")
    else:
        return now.strftime("%Y")

  def projectFolderCounter(self):
    self.change_SystemDir()
    os_currentdir = os.getcwd()
    folder_count = len(os.listdir(os_currentdir)) - 1
    return folder_count

  @staticmethod
  def encrypt(token, key='DECIDERTECH'):
      white_spaces = token.replace(" ", "")
      key_int = int.from_bytes(key.encode(), 'big') % 2**32
      encrypted = ''
      for i, char in enumerate(white_spaces):
          encrypted += chr((ord(char) + key_int) % 128)
      return encrypted

"""<img src="https://i.postimg.cc/76hwST3y/class-administrator.png" />
<hr />
"""

#@title
class ADMINISTRADOR(SAPEVOM_MOORA):

  path = "/content/drive/MyDrive/SAPEVOM_MOORA_3NPK"
  
  def __init__(self):
    # instânica classe SAPEVOM_MOORA
    super().__init__()
    # aponta para o diretório corrente
    self.change_SystemDir()
    # carrega o método principal do sistema
    self.showModuleAdmin()

  def root(self):
    os.chdir(self.SYSTEM_DIR)

  def headerMenu(self, text):
    header_menu = f'<p style="margin: 10px 0px 10px 0px; text-align:center;font-size:32px; color:black;font-weight: bold;">[{text}]</p> '
    display(HTML(header_menu))

  def layoutAdminModule(self, opt=1):
    # define layout do sistema
    html_layout = \
    f'''
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Audiowide&display=swap');
    </style>

    <div id='top' style="width:100%; height:auto; background-color:#1E1E1E; font-size:18px; 
    font-family:Audiowide; color:white; padding:14px 0px 14px 5px; box-sizing: border-box;">
     {self.NAME_SYSTEM}
    </div>
    
    <div id="left_t" style="width: 250px; height:60px; float: left; background-color:#0082C3; color: #fff; font-size:22px; 
    margin:0px; padding: 4px 10px 4px 10px; box-sizing: border-box; border-bottom: 1px solid #53C6FF;">
          <center><img height='52px' src="https://i.postimg.cc/d1VQwr91/icon-admin.png" /></center>
    </div>
    
    <div id ="right_t" style="width:calc(100% - 250px); height:60px; float: left; background-color:#FFF; font-weight: bold; 
    margin:0px; padding: 12px 0px 0px 20px; box-sizing: border-box; font-size:24px; color: #000; border-bottom: 1px solid #53C6FF;border-right: 1px solid #53C6FF;">
        Módulo Administrador  
    </div>
    '''

    html_location = \
    '''
    <p style="font-size:14px; color:#000; border-bottom: 1px solid #53C6FF"> Home ></p>
    '''

    # adicona menu de seleção ao layout
    container = widgets.HBox()
    label = widgets.Label(value="Selecione uma opção:")
    container.children = [label]

    dropdown = widgets.Dropdown(options=["Criar projeto", "Definir identificador para os Critérios", "Gerar resultado de Projeto",\
                                         "Excluir projeto", "Sair"])
    container.children += (dropdown,)

    # escuta ações nos componentes
    def on_button_click(b):
        opcao = dropdown.value
        button.disabled = True
        dropdown.disabled = True
        if opcao == 'Criar projeto':
          location.value = ''
          location.value += '<p style="font-size:14px; color:#000; border-bottom: 1px solid #53C6FF"> Home > <b>Criar novo projeto</b></p>'
          self.showNewProjectModule()
        elif opcao == 'Definir identificador para os Critérios':
          location.value = ''
          location.value += '<p style="font-size:14px; color:#000; border-bottom: 1px solid #53C6FF"> Home > <b>Definir identificação para os Critérios</b></p>'
          self.DefineIdentificationCriteria()
        elif opcao == 'Gerar resultado de Projeto':
          location.value = ''
          location.value += '<p style="font-size:14px; color:#000; border-bottom: 1px solid #53C6FF"> Home > <b>Gerar resultado de Projeto</b></p>'
          self.showResult()
        elif opcao == 'Excluir projeto':
          location.value = ''
          location.value += '<p style="font-size:14px; color:#000; border-bottom: 1px solid #53C6FF"> Home > <b>Excluir projeto</b></p>'
          self.RemoveProject()
        elif opcao == 'Sair':
          location.value = ''
          location.value += '<p style="font-size:14px; color:#000; border-bottom: 1px solid #53C6FF"> Home > <b>Sair</b></p>'
        else:
          pass

    
    button = widgets.Button(description="OK", button_style='info')
    button.on_click(on_button_click)
    container.children += (button,)

    
    # monta layout do Módulo Administrador
    layout = widgets.HTML(value=html_layout)
    location = widgets.HTML(value=html_location)
    
    # mostra layout
    display(layout, location, container)
    
  def showModuleAdmin(self, decider=1):
    self.layoutAdminModule()

  
  def showNewProjectModule(self):
    
    namesDM = []
    emailsDM = []

    html_new_project = \
    '''
    <br/>
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#0082C3; color: #fff; font-size:20px;">
    &#9776; Criar Novo Projeto
    </div>
    '''

    html_info_dm = \
    '''
    <br/>
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#0082C3; color: #fff; font-size:20px;">
    &#9776; Informações sobre Tomadores de Decisão
    </div>
    '''

    html_message = \
    '''
    <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#1E1E1E; color: #fff; font-size:14px;">
      Mensagem do sistema: 
    </div>
    '''

    #container 1
    label_project_name = widgets.Label(value='Digite o nome do novo projeto:')
    project_name = widgets.Text(description='', placeholder='nome em letra minúscula e sem espaço', layout=Layout(width='300px'))
    container1 = widgets.HBox([label_project_name, project_name])
    container1.layout.justify_content = 'flex-start'
    container1.layout.margin = '10px 0px 10px 0px'
    
    #container 2
    label_decision_makers = widgets.Label(value='Quantidade de decisores para o projeto:')
    nr_decision_makers = widgets.BoundedIntText(value=0, min=1, max=100, step=1, layout=Layout(width='90px'))
    container2 = widgets.HBox([label_decision_makers, nr_decision_makers])
    container2.layout.justify_content = 'flex-start'
    container2.layout.margin = '10px 0px 10px 0px'
    
    #container 3
    create_project = widgets.Button(description='Criar novo projeto', width='200px', button_style='info')

    #botao avançar
    nextstep_btn_layout = Layout(width='200px', margin='10px 0px 10px 0px')
    nextstep_button = widgets.Button(description="Avançar", button_style='info', layout = nextstep_btn_layout)
    
    def nextstep_button_clicked(b):
      self.set_FilenameProject(project_name.value)
      self.set_NumberDecisionMakers(nr_decision_makers.value)

      # desabilita escolhas
      nr_decision_makers.disabled = True
      project_name.disabled = True
      nextstep_button.disabled = True
      # carrega info decisores
      display(HTML(html_info_dm))
      for i in range(self.get_NumberDecisionMakers()):
        label_nome = widgets.Label(value='Nome do Decisor:')
        nome = widgets.Text(description='', layout=widgets.Layout(width='450px'))
        namesDM.append(nome)
        label_email = widgets.Label(value='Email:')
        email = widgets.Text(description='', layout=widgets.Layout(width='280px'))
        emailsDM.append(email)
        container_horizontal = widgets.HBox([label_nome, nome, label_email, email], layout=widgets.Layout(margin='10px 20px'))
        display(container_horizontal)

      # bota criar projeto
      display(container3)
      # mensagens do sistema
      display(message)

    def create_project_clicked(b):
      #redireciona para o diretório corrente do sistema
      self.change_SystemDir()
      
      # pasta de destino
      project_folder = os.path.join(self.SYSTEM_DIR,'projects',self.get_FilenameProject())

      # cria diretório para o projeto
      if not os.path.exists(project_folder):
        try:
          os.makedirs(project_folder)
          message.value = ''
          message.value += \
          '''
          <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#1E1E1E
          ; color: #fff; font-size:14px;"> Mensagem do sistema: Criado pasta do projeto </div>
          '''
          time.sleep(2)
        except:
          message.value = ''
          message.value += \
          '''
          <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#DE0000
          ; color: #fff; font-size:14px;"> Mensagem do sistema: Problemas ao criar pasta do projeto </div>
          '''
          time.sleep(1)
      
      # mover arquivo de upload para a pasta de destino
      self.set_FilenameMD(list(uploaded.keys())[0])
      try:
        for name,data in uploaded.items():
          shutil.move(name, project_folder)
          time.sleep(2)          
        message.value = ''
        message.value += \
        '''
        <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#1E1E1E
        ; color: #fff; font-size:14px;"> Mensagem do sistema: Upload realizado para a pasta do projeto com sucesso! </div>
        '''
        time.sleep(1)
      except:
        message.value = ''
        message.value += \
        '''
        <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#DE0000
        ; color: #fff; font-size:14px;"> Mensagem do sistema: Problemas ao realizar upload para a pasta do projeto </div>
        '''
        time.sleep(1)        
      
      #mover arquivos de apoio para pasta do projeto
      origem = os.path.join(self.SYSTEM_DIR,"support_files")
      destino = project_folder
      files = os.listdir(origem)
      try:
        for f in files:
          shutil.copy2(origem + "/" + f, destino)
        message.value = ''
        message.value += \
        '''
        <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#1E1E1E
        ; color: #fff; font-size:14px;"> Mensagem do sistema: Arquivos de apoio movidos para a posta do projeto com sucesso! </div>
        '''
        time.sleep(1)   
      except:
        message.value = ''
        message.value += \
        '''
        <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#DE0000
        ; color: #fff; font-size:14px;"> Mensagem do sistema: Problemas ao mover arquivos para a pasta do projeto!</div>
        '''
        time.sleep(1)   

      # preenchendo arquivo decision_makers.csv
      if self.createDecisonMakers(self.get_FilenameProject(), self.get_NumberDecisionMakers(), namesDM, emailsDM):
        message.value = ''
        message.value += \
        '''
        <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#1E1E1E
        ; color: #fff; font-size:14px;"> Mensagem do sistema: Arquivo com informaçõs dos Tomadores de Decisão foi salvo com sucesso! </div>
        '''
        time.sleep(1) 
      else:
        message.value = ''
        message.value += \
        '''
        <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#DE0000
        ; color: #fff; font-size:14px;"> Mensagem do sistema: Problemas ao preencher informações com Tomadores de Decisão! </div>
        '''
        time.sleep(1)
      message.value = ''
      message.value += \
      '''
      <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#548235
      ; color: #fff; font-size:14px;"> Projeto criado para uso com sucesso! </div>
      '''
    
    create_project.on_click(create_project_clicked)
    container3 = widgets.HBox([create_project])
    container3.layout.justify_content = 'flex-start'
    container3.layout.margin = '10px 0px 10px 0px'
    
    message = widgets.HTML(value=html_message)

    #Display all containers
    display(HTML(html_new_project))
    display(container1)
    display(container2)
    uploaded = files.upload()
    
    # Adiciona a ação ao botão
    nextstep_button.on_click(nextstep_button_clicked)
    
    display(nextstep_button)

  def verifiesCompletionDecisions(self, project):
    os.chdir(os.path.join(self.SYSTEM_DIR, "projects", project))
    df = pd.read_csv('decision_makers.csv')
    if df['flag'].all() == 1:
        return True
    else:
        return False

  def get_Decision(self, project):
    os.chdir(os.path.join(self.SYSTEM_DIR, "projects", project))
    return pd.read_csv('decision_makers.csv')['decider'].values

  def get_FileNameMatrix(self, project):
    os.chdir(os.path.join(self.SYSTEM_DIR, "projects", project))
    return pd.read_csv('decision_makers.csv')['decision_matrix'][0]

  def getColunsMatrix(self, project):
    self.root()
    os.chdir(os.path.join(self.path, "projects", project))
    return pd.read_excel(self.getFileNameMatrix(project)).columns[1:]

  def buildWeightMatrix(self, project, decision_values, name_matrix):
    self.root()
    os.chdir(os.path.join(self.path, "projects", project))
    columns = self.getColunsMatrix(project)
    df = pd.DataFrame(index=columns, columns=decision_values)
    for decider in decision_values:
        df_temp = pd.read_csv('weight' + decider + '.csv')
        df[decider] = df_temp['Weight'].values
    df['FinalScore'] = df.sum(axis=1)
    return df

  """
  Resolve o problema relacionado as alternativas com o método MOORA
  """

  def createDecisonMakers(self, project, number_decision_makers, namesDM, emailsDM):
    self.root()
    os.chdir(os.path.join(self.path, "projects", project))

    # abre arquivo decision_makers
    df = pd.read_csv("decision_makers.csv")

    # create decider in DataFrame
    for dm in range(number_decision_makers):
      dt = self.get_CurrentDateTime(1)
      key = dt + project + f"d{dm+1}"
      df.loc[len(df.index)] = [dm+1, dt, namesDM[dm].value, key, emailsDM[dm].value, self.get_FilenameMD(), project, 0]
    df.to_csv("decision_makers.csv")
    return True
      
  def SaveWeightMatrix(self, df):
    try:
      df.to_csv('weight_final.csv')
      return True
    except:
      return False

  def compileWeights(self):
    df_weight = pd.read_csv("weight.csv")
    features = df_weight['criterios'].unique()
    dm_amount = df_weight.shape[0] / len(features)
    dm_names = [f'Decisor{i+1}' for i in range(int(dm_amount))]
    df_compile = pd.DataFrame(0, index=features, columns=dm_names)

    # Abre o arquivo weight.csv
    df_get_values = pd.read_csv('weight.csv')

    # Itera sobre a lista features e captura os valores que correspondem ao valor da feature igual ao valor da coluna criterios
    for feature in features:
        values = df_get_values[df_get_values['criterios'] == feature]['Weight_final'].values
        df_compile.loc[feature] = values
    
    #adiciona a coluna Pesos Finais que será a soma de todas as colunas por linha
    df_compile['Pesos Finais'] = df_compile.sum(axis=1)

    return df_compile

  def showResult(self):

    html_sel_project = \
    '''
    <br/>
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#0082C3; color: #fff; font-size:20px;">
    &#9776; Selecionar Projeto
    </div>
    '''

    html_idt_res = \
    f'''
    <br/>
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#0082C3; color: #fff; font-size:20px;">
    &#9776; Apresentar Resultado do Projeto 
    </div>
    '''

    html_message_criteria = \
    '''
    <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#1E1E1E; color: #fff; font-size:14px;">
      Mensagem do sistema: 
    </div>
    '''

    # aponta para diretório do sistema
    os.chdir(os.path.join(self.SYSTEM_DIR, "projects"))
    
    # Listando os diretórios
    dir_list = [x for x in os.listdir() if os.path.isdir(x) and x != '.ipynb_checkpoints']

    # Criando o label
    label_res_project = widgets.Label(value="Selecione o Projeto:")
    
    # Criando o dropdown
    dropdown_res_project = widgets.Dropdown(
    options = dir_list,
    description='',
    disabled=False,
    )

    # Criando o botão
    button_res_project = widgets.Button(description="OK",button_style='info')
    
    message_criteria = widgets.HTML(value=html_message_criteria)

    def on_click_dic_project(b):
      # desabilita botão
      button_res_project.disabled = True

      # apresenta caixa de identifcar critérios
      display(HTML(html_idt_res))
      # define deretório corrente
      current_path = os.path.join(self.SYSTEM_DIR, 'projects')

      # muda o diretório do projeto
      os.chdir(current_path + '/' + dropdown_res_project.value)

      display(HTML('<br/><h3>Compilação dos pesos dos Decisores</h3><hr/>'))
      df_dm_weights = self.compileWeights()
      display(df_dm_weights)

      weights_final = df_dm_weights['Pesos Finais'].tolist()
      features,monotonicos  = self.readMonotonicos()  

      # carrega matriz de decisão
      md_trab = pd.read_excel('software_erp.xlsx')

      # Matrix de Decisão
      display(HTML('<br/><h3>Matriz de Decisão</h3><hr/>'))
      new_matrix = pd.DataFrame(data=md_trab.iloc[:,1:].values.tolist(), columns=features, index=md_trab.iloc[:,0])
      display(new_matrix)

      # 1N
      #Matriz Normalizada pelo desvio padrão
      display(HTML('<br/><h3>Matriz Normalizada Xij*</h3><hr/>'))
      mt_norm_xij = self.normalize_df_xij(new_matrix)
      display(mt_norm_xij)

      #Matriz Normalizada pelo desvio padrão ponderada
      display(HTML('<br/><h3>Matriz Normalizada Ponderada Xij*</h3><hr/>'))
      mt_norm_pond_xij = self.normalize_ponderada_df_xij(mt_norm_xij, weights_final)
      display(mt_norm_pond_xij)

      #Matriz Normalizada, Ponderada e Ordenada pelo Método Moora
      display(HTML('<br/><h3>Matriz Ordenada Método Moora*</h3><hr/>'))
      ordenacao_moora_mt_xij = self.ordenacaoMoora(mt_norm_pond_xij, monotonicos)
      ordenacao_moora_mt_xij_res = ordenacao_moora_mt_xij.sort_values('Valor*', ascending=False)[['Valor*']]
      ordenacao_moora_mt_xij_res['Ordenação'] = range(1, len(ordenacao_moora_mt_xij_res) + 1)
      display(ordenacao_moora_mt_xij_res)

      # Ordenação Tchebycheff Min-Max
      display(HTML('<br/><h3>Matriz Ordenada Método Tchebycheff Min-Max</h3><hr/>'))
      tcheby = self.tchebycheffMinMax(mt_norm_pond_xij.iloc[:,:-1], monotonicos)
      tcheby = tcheby.sort_values('Valor_Min_Max', ascending=True)[['Valor_Min_Max']]
      tcheby['Ordenação'] = range(1, len(tcheby) + 1)
      display(tcheby)

      # Ordenação Absoluta 1
      display(HTML('<br/><h3>Ordenação Absoluta 1</h3><hr/>'))
      # Selecionar colunas do DataFrame ordenacao_moora_mt_xij_res e ordenar pelos índices
      df1 = ordenacao_moora_mt_xij_res[['Valor*']].sort_index()
      # Selecionar coluna "Valor_Min_Max" do DataFrame tcheby e ordenar pelos índices
      df2 = tcheby[['Valor_Min_Max']].sort_index()
      # Calcular a diferença entre os valores das colunas selecionadas
      oabs_1 = pd.DataFrame({'Valor': df1["Valor*"] - df2["Valor_Min_Max"]})
      oabs_1 = oabs_1.sort_values('Valor', ascending=False)
      oabs_1['Ordenação'] = range(1, len(oabs_1) + 1)
      display(oabs_1)

      # 2N
      #Matriz Normalizada pelo desvio padrão
      display(HTML('<br/><h3>Matriz Normalizada 2N</h3><hr/>'))
      mt_norm_2N = self.normalize_df_2N(new_matrix)
      display(mt_norm_2N)

      #Matriz Normalizada pelo desvio padrão ponderada
      display(HTML('<br/><h3>Matriz Normalizada 2N Ponderada</h3><hr/>'))
      mt_norm_pond_2N = self.normalize_ponderada_df_xij(mt_norm_2N, weights_final)
      display(mt_norm_pond_2N)

      #Matriz Normalizada 2N, Ponderada e Ordenada pelo Método Moora
      display(HTML('<br/><h3>Matriz Normalizada 2N e Ordenada Método Moora*</h3><hr/>'))
      ordenacao_moora_2N = self.ordenacaoMoora(mt_norm_pond_2N, monotonicos)
      ordenacao_moora_2N = ordenacao_moora_2N.sort_values('Valor*', ascending=False)[['Valor*']]
      ordenacao_moora_2N['Ordenação'] = range(1, len(ordenacao_moora_2N) + 1)
      display(ordenacao_moora_2N)

      # Ordenação Matriz 2N Tchebycheff Min-Max
      display(HTML('<br/><h3>Matriz Normalizada 2N e Ordenada Método Tchebycheff Min-Max</h3><hr/>'))
      tcheby2N = self.tchebycheffMinMax(mt_norm_pond_2N.iloc[:,:-1], monotonicos)
      tcheby2N = tcheby2N.sort_values('Valor_Min_Max', ascending=True)[['Valor_Min_Max']]
      tcheby2N['Ordenação'] = range(1, len(tcheby2N) + 1)
      display(tcheby2N)

      # Ordenação Absoluta 2
      display(HTML('<br/><h3>Ordenação Absoluta 2</h3><hr/>'))
      # Selecionar colunas do DataFrame ordenacao_moora_mt_xij_res e ordenar pelos índices
      df2N_1 = ordenacao_moora_2N[['Valor*']].sort_index()
      # Selecionar coluna "Valor_Min_Max" do DataFrame tcheby e ordenar pelos índices
      df2N_2 = tcheby2N[['Valor_Min_Max']].sort_index()
      # Calcular a diferença entre os valores das colunas selecionadas
      oabs_2 = pd.DataFrame({'Valor': df2N_1["Valor*"] - df2N_2["Valor_Min_Max"]})
      oabs_2 = oabs_2.sort_values('Valor', ascending=False)
      oabs_2['Ordenação'] = range(1, len(oabs_2) + 1)
      display(oabs_2)

      # 3N
      #Matriz Normalizada pelo desvio padrão
      display(HTML('<br/><h3>Matriz Normalizada 3N</h3><hr/>'))
      mt_norm_3N = self.normalize_df_3N(new_matrix)
      display(mt_norm_3N)

      #Matriz Normalizada pelo desvio padrão ponderada
      display(HTML('<br/><h3>Matriz Normalizada 3N Ponderada</h3><hr/>'))
      mt_norm_pond_3N = self.normalize_ponderada_df_xij(mt_norm_3N, weights_final)
      display(mt_norm_pond_3N)

      #Matriz Normalizada 2N, Ponderada e Ordenada pelo Método Moora
      display(HTML('<br/><h3>Matriz Normalizada 3N e Ordenada Método Moora*</h3><hr/>'))
      ordenacao_moora_3N = self.ordenacaoMoora(mt_norm_pond_3N, monotonicos)
      ordenacao_moora_3N = ordenacao_moora_3N.sort_values('Valor*', ascending=False)[['Valor*']]
      ordenacao_moora_3N['Ordenação'] = range(1, len(ordenacao_moora_3N) + 1)
      display(ordenacao_moora_3N)

      # Ordenação Matriz 3N Tchebycheff Min-Max
      display(HTML('<br/><h3>Matriz Normalizada 3N e Ordenada Método Tchebycheff Min-Max</h3><hr/>'))
      tcheby3N = self.tchebycheffMinMax(mt_norm_pond_3N.iloc[:,:-1], monotonicos)
      tcheby3N = tcheby3N.sort_values('Valor_Min_Max', ascending=True)[['Valor_Min_Max']]
      tcheby3N['Ordenação'] = range(1, len(tcheby3N) + 1)
      display(tcheby3N)

      # Ordenação Absoluta 3
      display(HTML('<br/><h3>Ordenação Absoluta 3</h3><hr/>'))
      # Selecionar colunas do DataFrame ordenacao_moora_mt_xij_res e ordenar pelos índices
      df3N_1 = ordenacao_moora_3N[['Valor*']].sort_index()
      # Selecionar coluna "Valor_Min_Max" do DataFrame tcheby e ordenar pelos índices
      df3N_2 = tcheby3N[['Valor_Min_Max']].sort_index()
      # Calcular a diferença entre os valores das colunas selecionadas
      oabs_3 = pd.DataFrame({'Valor': df3N_1["Valor*"] - df3N_2["Valor_Min_Max"]})
      oabs_3 = oabs_3.sort_values('Valor', ascending=False)
      oabs_3['Ordenação'] = range(1, len(oabs_3) + 1)
      display(oabs_3)

      # Ordenação Absoluta Global AG
      display(HTML('<br/><h2 color="#0000ff">Ordenação Absoluta Global(AG)</h2><hr/>'))
      # Selecionar e ordenar os DataFrames de Ordenação Absoluta
      dfOA_1 = oabs_1[['Valor']].sort_index()
      dfOA_2 = oabs_2[['Valor']].sort_index()
      dfOA_3 = oabs_3[['Valor']].sort_index()
      # Calcular a soma de todas as ordenações absolutas 
      dfAG = pd.DataFrame({'Valor': dfOA_1['Valor'] + dfOA_2['Valor'] + dfOA_3['Valor'] })
      dfAG = dfAG.sort_values('Valor', ascending=False)
      dfAG['Ordenação'] = range(1, len(dfAG) + 1)
      display(dfAG) 

    # Definindo a ação do botão
    button_res_project.on_click(on_click_dic_project)

    # Criando o container
    container_res_project = widgets.HBox(children=[label_res_project, dropdown_res_project, button_res_project])
    
    # Exibe todos os containers 
    display(HTML(html_sel_project))
    display(container_res_project)

  ##################################
  # Aplicação do Método MOORA 3NAG #
  ##################################

  def normalize_df_xij (self, df):
    # Aplicando a fórmula em cada valor da coluna
    normalized_df = df.apply(lambda x: x / np.sqrt(np.sum(np.square(x))), axis=0)
    
    # Retornando a matriz normalizada
    return normalized_df.round(5)

  def normalize_ponderada_df_xij(self, df, weights_final):
    # Multiplicando cada coluna pelo seu respectivo peso
    weighted_df = df * weights_final
    
    # Retornando a matriz normalizada ponderada
    return weighted_df.round(5)

  def ordenacaoMoora(self, df, monotonicos):
    df["Valor*"] = 0  # cria nova coluna no DataFrame
    
    # cria listas com posição dos elementos "LUCRO" e "CUSTO" na lista monotonicos
    mono_lucros = [i for i, val in enumerate(monotonicos) if val == "LUCRO"]
    mono_custos = [i for i, val in enumerate(monotonicos) if val == "CUSTO"]
    
    # realiza a soma correspondente às colunas de lucros e custos e adiciona à coluna "Valor*"
    df["Valor*"] = df.iloc[:, mono_lucros].sum(axis=1) - df.iloc[:, mono_custos].sum(axis=1)
    return df

  def tchebycheffMinMax(self,df, monotonicos):
    ri = []  # lista que guardará os valores R
    for i, mono in enumerate(monotonicos):
        if mono == "LUCRO":
            ri.append(df.iloc[:, i].max())  # adiciona o maior valor da coluna
        else:
            ri.append(df.iloc[:, i].min())  # adiciona o menor valor da coluna
        
    # calcula o valor mínimo do Tchebycheff e adiciona a coluna "Valor_Min_Max"
    for j in range(df.shape[0]):
        temp = []
        for i, mono in enumerate(monotonicos):
            if mono == "LUCRO":
                df.iloc[j, i] = abs(ri[i] - df.iloc[j, i])
                temp.append(abs(ri[i] - df.iloc[j, i]))
            else:
                df.iloc[j, i] = abs(df.iloc[j, i] - ri[i])
                temp.append(abs(df.iloc[j, i] - ri[i]))
    df["Valor_Min_Max"] = df.max(axis=1)
    
    return df

  def normalize_df_2N(self, df):
    # Calculando a soma dos valores absolutos de cada coluna
    sum_abs = df.abs().sum()
    
    # Dividindo cada valor pelo seu respectivo somatório
    normalized_df = df.apply(lambda x: x / sum_abs, axis=1)
    
    # Retornando o DataFrame normalizado
    return normalized_df

  def normalize_df_3N(self,df):
    df_3N = df.apply(lambda x: x / x.max(), axis=0)
    return df_3N
   
  def readMonotonicos(self):
    arq = pd.read_csv('monotonicos_criterios.csv')
    return arq.iloc[:,0].tolist(), arq.iloc[:,1].tolist()

  def DefineIdentificationCriteria(self):

    html_sel_project = \
    '''
    <br/>
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#0082C3; color: #fff; font-size:20px;">
    &#9776; Selecionar Projeto
    </div>
    '''

    html_idt_criteria = \
    '''
    <br/>
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#0082C3; color: #fff; font-size:20px;">
    &#9776; Definir identificador para os critérios
    </div>
    '''

    html_message_criteria = \
    '''
    <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#1E1E1E; color: #fff; font-size:14px;">
      Mensagem do sistema: 
    </div>
    '''

    # aponta para diretório do sistema
    os.chdir(os.path.join(self.SYSTEM_DIR, "projects"))
    
    # Listando os diretórios
    dir_list = [x for x in os.listdir() if os.path.isdir(x) and x != '.ipynb_checkpoints']

    # Criando o label
    label_dic_project = widgets.Label(value="Selecione o Projeto:")
    
    # Criando o dropdown
    dropdown_dic_project = widgets.Dropdown(
    options = dir_list,
    description='',
    disabled=False,
    )

    # Criando o botão
    button_dic_project = widgets.Button(description="OK",button_style='info')
    
    message_criteria = widgets.HTML(value=html_message_criteria)

    def on_click_dic_project(b):
      # desabilita botão
      button_dic_project.disabled = True

      # apresenta caixa de identifcar critérios
      display(HTML(html_idt_criteria))
      # define deretório corrente
      current_path = os.path.join(self.SYSTEM_DIR, 'projects')

      #variaveis
      monotonicos = ["CUSTO","LUCRO"]

      # muda o diretório do projeto
      os.chdir(current_path + '/' + dropdown_dic_project.value)

      #abre arquivo "decision_makers.csv" e obtém nome arquivo da matriz de decisão
      df_mdm = pd.read_csv("decision_makers.csv") 
      name_mdm = df_mdm.loc[0, 'decision_matrix']
      self.set_FilenameMD(name_mdm)

      # abre o arquivo name_mdm que é a matriz de decisão
      df_md = pd.read_excel(self.get_FilenameMD())
      cols = df_md.columns[1:]

      button_mnt_salvar = widgets.Button(description='Salvar', button_style='info')
      
      # Cria um container vazio
      container_mnt = widgets.HBox()

      # Loop para criar cada elemento da lista
      for i in cols:
        label_mnt = widgets.Label(value=i, layout=widgets.Layout(width='200px', text_align='right'))
        dropdown_mnt = widgets.Dropdown(options=monotonicos)
        container_mnt.children += (label_mnt, dropdown_mnt)
        container_mnt_horizontal = widgets.HBox([label_mnt, dropdown_mnt], layout=widgets.Layout(margin='10px 20px'))
        container_mnt.layout.justify_content = 'flex-end'
        display(container_mnt_horizontal)
      display(button_mnt_salvar)
      display(message_criteria)

           
      # Função que lista cada valor selecionado para a lista df_md
      def salvar_mnt_clicked(b):
        with open("monotonicos_criterios.csv", "r+") as arquivo:
          # preservando a primeira linha
          primeira_linha = arquivo.readline()
          # movendo o cursor para a segunda linha
          arquivo.seek(len(primeira_linha))
          # loop para apanhar valores selecionados para os critérios
          for i in range(len(container_mnt.children)):
            if i % 2 == 0:
              arquivo.write(container_mnt.children[i].value + "," + container_mnt.children[i+1].value + "\n")
          arquivo.close()
          message_criteria.value = ''
          message_criteria.value += \
          '''
          <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#1E1E1E
          ; color: #fff; font-size:14px;"> Mensagem do sistema: Arquivo salvo com sucesso! </div>
          '''
          time.sleep(2)
        

      button_mnt_salvar.on_click(salvar_mnt_clicked)

    # mostra todos os componentes
       
      
    # Definindo a ação do botão
    button_dic_project.on_click(on_click_dic_project)

    # Criando o container
    container_dic_project = widgets.HBox(children=[label_dic_project, dropdown_dic_project, button_dic_project])
    
    # Exibe todos os containers 
    display(HTML(html_sel_project))
    display(container_dic_project)

  def RemoveProject(self):

    html_rmv_project = \
    '''
    <br/>
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#DE0000; color: #fff; font-size:20px;">
    &#9776; Selecionar Projeto para Remover
    </div>
    '''

    html_message_rmv = \
    '''
    <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#1E1E1E; color: #fff; font-size:14px;">
      Mensagem do sistema: 
    </div>
    '''

    # aponta para diretório do sistema
    os.chdir(os.path.join(self.SYSTEM_DIR, "projects"))
    
    # Listando os diretórios
    dir_list = [x for x in os.listdir() if os.path.isdir(x) and x != '.ipynb_checkpoints']

    # Criando o label
    label_rmv_project = widgets.Label(value="Selecione o Projeto a ser removido:")
    
    # Criando o dropdown
    dropdown_rmv_project = widgets.Dropdown(
    options = dir_list,
    description='',
    disabled=False,
    )

    # Criando o botão
    button_rmv_project = widgets.Button(description="Remover",button_style='danger')
    
    message_rmv = widgets.HTML(value=html_message_rmv)

    def on_click_rmv_project(b):
      # desabilita botão
      button_rmv_project.disabled = True

      # define deretório corrente
      directory_project_path = os.path.join(self.SYSTEM_DIR, 'projects', dropdown_rmv_project.value)
        
      if os.path.exists(directory_project_path):
        shutil.rmtree(directory_project_path)
        message_rmv.value = ''
        message_rmv.value += \
        '''
        <div style="width:100%;border-radius:5px; margin:60px 0px 10px 0px; padding: 5px 0px 5px 10px; box-sizing: border-box; background-color:#1E1E1E
        ; color: #fff; font-size:14px;"> Mensagem do sistema: Projeto excluído com sucesso! </div>
        '''
  
    # Definindo a ação do botão
    button_rmv_project.on_click(on_click_rmv_project)

    # Criando o container
    container_rmv_project = widgets.HBox(children=[label_rmv_project, dropdown_rmv_project, button_rmv_project])
    
    # Exibe todos os containers 
    display(HTML(html_rmv_project))
    display(container_rmv_project)
    display(message_rmv)

"""<img src="https://i.postimg.cc/5yMJTkcf/class-decisores.png" />
<hr />
"""

#@title
class DECIDER(SAPEVOM_MOORA):
  def __init__(self):
    super().__init__()
    self.CATEGORICAL_FEATURES = ["Absolutamente menos importante", "Muito menos importante", "Menos importante",\
                           "Equivalente", "Mais importante", "Muito mais importante", "Absolutramente mais importante"]
    self.NUMERICAL_FEATURES = [-3,-2,-1,0,1,2,3]
    self.showModuleDecider()

  def printMatrix(self, rows, cols, features):
    new_dm = pd.DataFrame(data = [], index = features, columns=features)
    for r in range(0,new_dm.shape[0]):
      for c in range(0,new_dm.shape[1]):
        if (r==c):
          new_dm.iloc[r][c] = "Equivalente"
        elif (r<c):
          new_dm.iloc[r][c] = "Avaliar"
        else:
          new_dm.iloc[r][c] = "***"
    display(new_dm)
    return new_dm

  def createWeightFinal(self, df, pdm_value):
    df_weight_final = df
    pdm_value = pdm_value
    df_weight_final["Weight_final"] = (df_weight_final["Weight"]*(1-pdm_value/100) + df_weight_final["pk"]*(pdm_value/100))
    return df_weight_final

  def createWeightPK(self, df, pdm_value):
    pdm_value = pdm_value
    df_new = df.copy()
    df_pk = pd.read_csv("pk.csv", names=df_new.index.unique())
    if pdm_value == 0:
      df_new['pk'] = 0
    else:
      df_new['pk'] = pdm_value
      unique_features = df_new.index.unique()
      for i in unique_features:
        df_pk_filter = df_pk[(df_pk['ano'] < datetime.now().year) & (df_pk['tempo_dm'] >= 5)]
        median_val = df_pk_filter[i].median()
        df_new.loc[i,'pk'] = median_val
      
    return df_new

  def createWeight(self,df):
    df['Weight'] = df['Norm_Score']
    min_value = df[df['Norm_Score'] > 0]['Norm_Score'].min()
    df['Weight'].mask(df['Weight'] == 0, min_value * 0.01, inplace=True)
    return df

  def scoreTransformerN1(self, df):
    df['Norm_Score'] = (df['Score'] - df['Score'].min()) / (df['Score'].max() - df['Score'].min())
    return df

  def saveDecisionWeight(self,df):
    if os.path.exists('weight.csv'):
      df_csv = pd.read_csv('weight.csv', names=df.index.unique())
      df_csv.append(df).to_csv("weight.csv", index_label='criterios')
    else:
      df.to_csv('weight.csv', index_label='criterios')

  
  def plot_weight_final(self,df):
    features = df.index.tolist()
    weights = df["Weight_final"].values.tolist()

    fig, ax = plt.subplots(figsize=(14,10))

    colors = ["blue" if w >= 0 else "red" for w in weights]
    positions = list(range(len(features)))
    ax.barh(positions, weights, height=0.5, color=colors)

    ax.set_yticks(positions)
    ax.set_yticklabels(features)

    ax.set_title("Valores Peso por Critério")
    ax.set_xlabel("Valor dos Pesos Finais")

    for i, w in zip(positions, weights):
        ax.text(w, i, str(w), ha="left", va="center")

    display(HTML('<br/><h3>Gráfico dos Pesos dos Critérios</h3><hr/>'))
    display(plt.show())


  def preferenceBetweenCriteria(self, filename, decider, pdm_value, years_ml):
    filename = filename
    decider = decider
    pdm_value = pdm_value
    years_ml = years_ml
    html_peer_comparison = \
    '''
    <br/>
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#0082C3; color: #fff; font-size:20px;">
    &#9776; Comparação paritária entre Critérios
    </div>
    '''
    display(HTML(html_peer_comparison))
    display(HTML("<h2>Matriz de Decisão a ser avaliada</h2>"))
    
    matrix = pd.read_excel(filename)
    rows, cols, features = self.loadFeatures(matrix)
    alternatives = self.loadAlternatives(matrix)
    new_matrix = self.printMatrix(rows,cols,features)

    # cria um lista para armazenar o peso das avaliações
    containers_avaliacao = []
    # imprime título
    display(HTML("<h2>Avaliação dos Critérios</h2>"))
    # Loop para criar cada elemento da lista
    for r in range(new_matrix.shape[0]):
      for c in range(new_matrix.shape[1]):
        if r==c:
          new_matrix.iloc[r, c] = 0
        elif r<c:
          label_avl = widgets.Label(value=f"Avaliar o critério {new_matrix.index[r]} em relação ao critério {new_matrix.columns[c]}")
          dropdown_avl = widgets.Dropdown(options=self.CATEGORICAL_FEATURES)
          container_avl = HBox([label_avl, dropdown_avl])
          containers_avaliacao.append(container_avl)
          display(container_avl)
        else:
          pass

    save_button_avl = widgets.Button(description='Salvar', button_style='info')
    display(save_button_avl)
    
    def on_save_avl_button_clicked(b):
      dropdown_count = 0
      for r in range(new_matrix.shape[0]):
        for c in range(new_matrix.shape[1]):
          if r == c: pass
          if r < c:
            new_matrix.iloc[r, c] = self.NUMERICAL_FEATURES[containers_avaliacao[dropdown_count].children[1].index]
            new_matrix.iloc[c, r] = -1 * self.NUMERICAL_FEATURES[containers_avaliacao[dropdown_count].children[1].index]
            dropdown_count += 1
          else: pass
      # gera uma coluna pontuação que é a soma dos critérios avaliados 
      new_matrix["Score"] = new_matrix.sum(axis=1)
      # gera a coluna Score_Norm e coloca os valores normalizados da coluna Score
      new_matrix_norm = self.scoreTransformerN1(new_matrix)
      # se coluna Score_Norm possuir valor nulo, encontra o menor valor e calcula 1% desse valor
      new_matrix_weight = self.createWeight(new_matrix_norm)
      new_matrix_pk = self.createWeightPK(new_matrix_weight, pdm_value)
      new_matrix_weight_final = self.createWeightFinal(new_matrix_pk, pdm_value)
      self.saveDecisionWeight(new_matrix_weight_final)
      display(HTML('<br><h3>Peso dos Critérios</h3><hr/>'))
      display(new_matrix_weight_final)
      self.plot_weight_final(new_matrix_weight_final)

    save_button_avl.on_click(on_save_avl_button_clicked)

  def verifyAccessDecider(self, project, key_access):
    path = os.path.join(os.getcwd(), "projects", project)
    os.chdir(path)
    df = pd.read_csv("decision_makers.csv", index_col=0)
    df_access = df.copy()
    df_access.query("key == @key_access", inplace=True)
    if df_access['flag'].iloc[0]==0:
      df.loc[df['key'] == key_access, 'flag'] = 1
      df.to_csv('decision_makers.csv')
      return True,df
    else:
      return False,df

  def showScoreTable(self):
    html_peer_comparison = \
    '''
    <br/>
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#0082C3; color: #fff; font-size:20px;">
    &#9776; Comparação paritária entre Critérios
    </div>
    '''
    display(HTML(html_peer_comparison))
    score = pd.DataFrame(index=list(self.CATEGORICAL_FEATURES), columns=["SCORE"], data=list(self.NUMERICAL_FEATURES))
    display(score)

  def loadAlternatives(self, df):
    return df.iloc[:,0].tolist()

  def loadFeatures(self, df):
    df = df.drop(df.columns[[0]], axis=1)
    features = df.columns.tolist()
    rows = df.shape[0]
    cols = df.shape[1]
    return rows, cols, features

  def loadDecisionMatrix(self, file_name, decider):
    df = pd.read_excel(file_name)
    return df
  
  def defineValueMaturityLevel(self, dm_file, dm_name):
    dm_file = dm_file
    dm_name = dm_name
    # valores para tempo de cargo
    html_maturity_level = \
    '''
    <br/>
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#0082C3; color: #fff; font-size:20px;">
    &#9776; Tempo na Função ou Cargo
    </div>
    '''

    # cria o label
    label_ml = widgets.Label(value = "Tempo que exerce o Cargo ou Função:")
    label_years_ml = widgets.Label(value = "anos")
    # cria a caixa de texto
    slider_ml =  widgets.SelectionSlider(options=[x for x in range(0,36)], continuous_update=False)

    # Cria o botão Avançar
    button_ml= widgets.Button(description='Avançar', button_style='info', layout=Layout(width='100px'))
    container_ml = HBox([label_ml, slider_ml, label_years_ml, button_ml])

    # Função que será chamada ao apertar o botão
    def on_button_ml_clicked(b):
      self.defineValuePastDM(dm_file, dm_name, slider_ml.value) 
       
    
    # Associa a função ao botão
    button_ml.on_click(on_button_ml_clicked)

    display(HTML(html_maturity_level))
    display(container_ml)

  def defineValuePastDM(self, dm_file, dm_name, years_ml):
    dm_file = dm_file
    dm_name = dm_name
    years_ml = years_ml
    # valores a serem selecionados de influência
    html_perc_pdm = \
    '''
    <br/>
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#0082C3; color: #fff; font-size:20px;">
    &#9776; Porcentagem de Influência na sua decisão, baseada em Tomadores de Decisão Experientes do passado
    </div>
    '''

    # cria o label
    label_pdm = widgets.Label(value = "Porcentagem de influência por Tomadores de Decisão Experientes do passado:")

    # cria a caixa de texto, conforme anos de experiência
    if (years_ml>=0) and (years_ml<=1):
      dropdown_pdm = widgets.Dropdown(options=[x for x in range(0,51,10)], layout={'width': '150px'})
    elif (years_ml>=2) and (years_ml<=5):
      dropdown_pdm = widgets.Dropdown(options=[x for x in range(0,26,5)], layout={'width': '150px'})
    else:
      dropdown_pdm = widgets.Dropdown(options=[x for x in range(0,11,5)], layout={'width': '150px'})

    # Cria um label com o texto "%"
    label_text_perc = widgets.Label(value='%')

    # Cria o botão Avançar
    button_pdm = widgets.Button(description='Avançar', button_style='info', icon='check', layout=Layout(width='100px'))
    container_pdm = HBox([label_pdm, dropdown_pdm, label_text_perc, button_pdm ])

    # Função que será chamada ao apertar o botão
    def on_button_pdm_clicked(b):
      self.preferenceBetweenCriteria(dm_file, dm_name, dropdown_pdm.value, years_ml)
   
    # Associa a função ao botão
    button_pdm.on_click(on_button_pdm_clicked)

    display(HTML(html_perc_pdm))
    display(HTML("<h2>Sugestão de influência, conforme Nível de Maturidade:</h2>"))
    display(HTML("<span style='color:#0000ff; font-weight: bold;'>De 0 até 1 ano na função</span> : até 50%<br/>\
      <span style='color:#0000ff; font-weight: bold;'>De 2 até 5 anos na função</span>: até 25% <br/>\
      <span style='color:#0000ff; font-weight: bold;'>De 5 ou mais anos na função</span>: até 10%"))
    display(container_pdm)


  def showModuleDecider(self):
    # define layout do sistema decisor
    html_layout_decisor = \
    f'''
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Audiowide&display=swap');
    </style>

    <div id='top' style="width:100%; height:auto; background-color:#1E1E1E; font-size:18px; 
    font-family:Audiowide; color:white; padding:14px 0px 14px 5px; box-sizing: border-box;">
     {self.NAME_SYSTEM}
    </div>
    
    <div id="left_t" style="width: 250px; height:60px; float: left; background-color:#0082C3; color: #fff; font-size:22px; 
    margin:0px; padding: 8px 10px 8px 10px; box-sizing: border-box; border-bottom: 1px solid #53C6FF;">
          <center><img height='45px' src="https://i.postimg.cc/c1v55NFJ/icon-decider.png" /></center>
    </div>
    
    <div id ="right_t" style="width:calc(100% - 250px); height:60px; float: left; background-color:#FFF; font-weight: bold; 
    margin:0px; padding: 12px 0px 0px 20px; box-sizing: border-box; font-size:24px; color: #000; border-bottom: 1px solid #53C6FF;
    border-right: 1px solid #53C6FF;">
        Módulo Decisor  
    </div>
    '''

    html_nome_decisor = \
    '''
    <p style="font-size:14px; color:#000; border-bottom: 1px solid #53C6FF"> Decisor: </p>
    '''

    html_info_key = \
    '''
    <br/>
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#0082C3; color: #fff; font-size:20px;">
    &#9776; Chave de ingresso
    </div>
    '''

    html_perc_pdm = \
    '''
    <div style="border-radius:5px; width:100%; margin:0px 0px 10px 0px; padding: 10px 0px 10px 10px; box-sizing: border-box;
    background-color:#0082C3; color: #fff; font-size:20px;">
    &#9776; Influência de Decisores Anteriores
    </div>
    '''

    # cria o label
    label_key = widgets.Label(value = "Chave para ingresso:")

    # cria a caixa de texto
    self.dm_key = widgets.Text(description="", value="", placeholder="Digite aqui sua chave", disabled=False, layout=widgets.Layout(width='250px'))

    # cria o botão
    button_key = widgets.Button(description='Validar', button_style='info', layout=widgets.Layout(width='120px'))
 
    
    layout_decisor = widgets.HTML(value=html_layout_decisor)
    nome_decisor = widgets.HTML(value=html_nome_decisor)
    display(layout_decisor, nome_decisor)

    # cria um box para organizar os componentes
    box_layout = widgets.Layout(display='flex', flex_flow='row', align_items='center', width='60%')
    box_autenticacao = widgets.HBox([label_key, self.dm_key, button_key], layout=box_layout)

    # apresenta box_autenticacao
    display(HTML(html_info_key))
    display(box_autenticacao)
    
    # cria a função que é executada ao clicar no botão
    def on_button_clicked_decider(b):
      dm_key = self.dm_key.value
      os.chdir(self.SYSTEM_DIR + "/" + "projects" + "/" + dm_key[19:-2])
      df_dm = pd.read_csv('decision_makers.csv')
      dm_name = df_dm.loc[df_dm['key'] == dm_key]['decider'].values[0]
      dm_project = df_dm.loc[df_dm['key'] == dm_key]['project'].values[0]
      dm_file = df_dm.loc[df_dm['key'] == dm_key]['decision_matrix'].values[0]
      self.set_FilenameProject(dm_project)
      nome_decisor.value = ''
      nome_decisor.value += f'<p style="font-size:14px; color:#000; border-bottom: 1px solid #53C6FF"> Decisor: {dm_name.upper()}</p>' 
      #self.showScoreTable()
      #self.defineValuePastDM(dm_file,dm_name)
      self.defineValueMaturityLevel(dm_file,dm_name)

    # ao clicar no botão, executa a função
    button_key.on_click(on_button_clicked_decider)

#@title
# apresenta Sobre DECIDERTECH
html_sobre = \
'''
  <div style="width:100%; height:120px; color: white; background-color:#008AD1;padding-top:20px">
    <center><img src="https://i.postimg.cc/kG8wFgMw/run-admin.png" />
  </div>
  <div style=”clear: both”>
'''
display(HTML(html_sobre))

"""<img src="https://i.postimg.cc/k52nJ0gq/rum-adminmodule.png" />
<hr/>
"""

# imstância módulo ADMNISTRADOR
admin = ADMINISTRADOR()

"""&nbsp;"""

#@title
# apresenta Sobre DECIDERTECH
html_sobre = \
'''
  <div style="width:100%; height:180px; color: white; background-color:#008AD1;padding-top:40px">
    <center><img src="https://i.postimg.cc/CxZtzSkP/run-decisores.png" />
  </div>
  <div style=”clear: both”>
'''
display(HTML(html_sobre))

"""<img src="https://i.postimg.cc/3rcFWp1h/rum-decisionmodule.png" />
<hr/>
"""

# carrega módulo Decisor
decider1 = DECIDER()

